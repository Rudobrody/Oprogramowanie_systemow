////////////////////////////////////////////////////////
///////      Podstawowa konfiguracja
////////////////////////////////////////////////////////

//#define CPP_EXAMPLE

#define BUFFERSYNC

#define WIN_PLOT
#define NazwaPlikuDanych "Data/TMSLABoutputData.csv"
#define CSV_NAGLOWEK "Wsp. x,Wsp. y1,Wsp. y2\n"
#define CSV_DANE "%i,%i,%i\n",Tim, y[0], y[1]

////////////////////////////////////////////////////////


#include "main.h"
#include "math.h"

#ifdef TMSLAB_WIN
  #include "stdio.h"
#endif

unsigned long *ekran; // Adres obszaru graficznego LCD [8*128*2]
#ifdef TMSLAB_C2000
unsigned char *textEkran; // Adres obszaru tekstowego [40*16/2]
#endif

#ifdef TMSLAB_WIN
unsigned short int *textEkran; // Adres obszaru tekstowego [40*16/2]
extern int (*PartialRefresh)();
char credits[43]="- Symulacja pracy silnika elektrycznego  -";  // Tekst wyswietlany w naglowku symulatora
long Timer2IsrPeriod=1; // okres pracy symulowanego licznika Timer2 podany w przybliďż˝eniu w ms
#ifdef WIN_PLOT
  FILE* outputCSV=0;
#endif
  #endif

int p=0;                    // %%Pomocnik licznika do wykresu %%
int Tim = 0;                // Licznik uzytkownika
int f = 0;
unsigned int preScale = 0;  // Preskaler licznika uzytkownika
volatile char EnableRefresh = 0;    //Zezwolenie na odswiezenie zawartosci pamieci graficznej

R_P_LCD_TMSLAB LCD;             // Obiekt obslugujacy LCD
R_P_KEYBOARD_TMSLAB KEYBOARD;   // Obiekt obslugujacy klawiature
R_P_LEDBAR_TMSLAB LEDBAR;       // Obiekt obslugujacy diody LED


//Tablice danych/obiektow graficznych
#define MaxObj 200
#ifdef CPP_EXAMPLE
square objects[MaxObj];
#else
int dx[MaxObj];
int dy[MaxObj];
int s[MaxObj];
int x[MaxObj];
int y[MaxObj];
#endif

unsigned char Bufor[] = "PIDMOT  ";

//Funkcja tworząca okrąg w wybranym miejscu

void drawCircle(int xc, int yc, int r) {
    int x, y;
    for (y = yc - r; y <= yc + r; y++) {
        x = xc + sqrt(r*r - (y-yc)*(y-yc));
        SetPixel(ekran, x, y);
        x = xc - sqrt(r*r - (y-yc)*(y-yc));
        SetPixel(ekran, x, y);
    }
    for (x = xc - r; x <= xc + r; x++) {
            y = yc + sqrt(r*r - (x-xc)*(x-xc));
            SetPixel(ekran, x, y);
            y = yc - sqrt(r*r - (x-xc)*(x-xc));
            SetPixel(ekran, x, y);
}
}
/*void drawSpeedometer(int length, float angle, int baseX,int baseY ){
int I=0;
if (angle>270){
angle = angle-270;
angle = 90-angle;
I = 1;
}
angle = (angle * M_PI) / 180;                    /// Zamiana na radiany
int a = tan(angle);                              /// Współczynnik kierunkowy
int endx = baseX + (int)(length * cos(angle));   /// Punkt końcowy X (na okręgu)
int endy = baseY + (int)(length * sin(angle));   /// Punkt końcowy Y (na okręgu)
int y;
for (int x=0; x<= endx-baseX;x++){
y = a*x;
if(y>endy){
return;
}
if (I=1){
SetPixel(ekran, x + baseX, -y+baseY);
}
if (I=0){
SetPixel(ekran, x + baseX, y+baseY);
}
};

}*/


//Rysowanie wskaźnika prędkości obrotowej
void drawSpeedometer(int x0, int y0, int length, int angle) {
    float radians = angle * 3.14159 / 180;
    int x1 = x0 + length * cos(radians);
    int y1 = y0 - length * sin(radians);
    int dx = x1 - x0;
    int dy = y1 - y0;
    int steps = abs(dx) > abs(dy) ? abs(dx) : abs(dy);
    float xstep = dx / (float)steps;
    float ystep = dy / (float)steps;

for (int i = 0; i < steps; i++) {
int x = x0 + xstep * i;
int y = y0 + ystep * i;
SetPixel(ekran, x, y);
    }
}
// Rysowanie pustego wykresu
void wykres(int startx, int starty ){
int x = startx;
int y = starty;

//Linie podstawowe
for(int a=x;a<x+100;a++){
SetPixel(ekran, a, y+100);
}
for(int b=y;b<y+100;b++){
SetPixel(ekran, startx, b);
           }
//Eleganckie strzałki
/*int p;
for(int w = starty ; w<=starty + 4;w++){
for(int s = startx-p ; s<=startx+p;s++){
SetPixel(ekran, s, w);
p=p+1;
}
}*/
// Symulator crashuje w przypadku poprzedniej pętli więc ręcznie
// Pion
SetPixel(ekran, 10, 9);
SetPixel(ekran, 10, 10);
SetPixel(ekran, 9, 11);
SetPixel(ekran, 11, 11);
SetPixel(ekran, 8, 12);
SetPixel(ekran, 9, 12);
SetPixel(ekran, 11, 12);
SetPixel(ekran, 12, 12);
//Poziom

SetPixel(ekran, 110, 110);
SetPixel(ekran, 109, 110);
SetPixel(ekran, 109, 111);
SetPixel(ekran, 108, 109);
SetPixel(ekran, 108, 112);
SetPixel(ekran, 108, 111);
SetPixel(ekran, 108, 108);
};

// Tworzenie funkcji obliczającej obiekt inercyjny
double obiektInercyjny(double u, double T, double K, double y0, double dt,
                       int n)
{   int y1=1;

    double y = y0;
    for (int i = p; i < Tim; i++)
    {

        double dy = (K * (u - y)) / T;
        y = y + dy * dt;
        if(y1==1){
            y1=2;
        }
        if(y1==2){
            int yp = y;
            //return yp;
        }
        if (Tim < 100)
        {
            SetPixel(ekran, 10 + i, 110 - (int )y);
        }
        if (Tim > 100)
        {
            SetPixel(ekran, 10 + i-p, 110 - (int )y);
        }
    }
    return y;
}

int main()


    {
        SetUpPeripherials();
#ifdef TMSLAB_C2000
        LCD.LCD_Init(ekran, textEkran);
#endif

#ifdef TMSLAB_WIN
        LCD.LCD_Init(&ekran,&textEkran);
#ifdef WIN_PLOT
  outputCSV=fopen(NazwaPlikuDanych,"w+" );
  fprintf(outputCSV,CSV_NAGLOWEK);
#endif
#endif

        KEYBOARD.InitKB(100);
        LEDBAR.InitLedBar();
        InitData();
        EnableInterrupts();

//        float Kp = 0.01;
//        float Ki = 0.01;
//        float Kd = 0.001;
//        float zadana = 54;
//        float d_tym = 0;
//        float i_tym = 0;
//        //float
//        float Uchyb;
//        float P_term;
//        float I_term;
//        float D_term;
//        int new_value;*/
        double u =100;       // sygnał wejściow obiektu inercyjnego
        double T = 0.5;     // stałą czasowa
        double K = 2;       // wzmocnienie obiektu inercyjnego
        double y0 = 0;      // sygnał początkowy
        double dt = 0.01;   // krok czasowy
        int n = 100;        // liczba iteracji
        while (1)
        {
            EnableRefresh = 1;
            LCD.Synchronize();
            EnableRefresh = 0;

            unsigned char Key = KEYBOARD.GetKey();

            LEDBAR.SetValue(Tim);
            //Bufor[6] = Key / 10 + '0';
            //Bufor[7] = Key % 10 + '0';
            PrintText(textEkran, Bufor, 8, 16, 7);
            ClearScreen();
            wykres(10, 10);                                  ///////   Tworzenie pustego wykresu
            drawCircle(200,60,30);                           ///////   Wywołanie funkcji tworzenia okręgu
            //DrawPixels(Key);
            int y = obiektInercyjny(u, T, K, y0, dt, n);
            drawSpeedometer(200, 60, 30, Tim*10);            ///////   Wywołanie funkcji tworzenia wskazówki
            //Bufor[7] = y % 10 + '0';
            // REGULATOR PID
      /*      Uchyb = zadana-new_value;
            P_term = Kp*Uchyb;
            I_term += Uchyb;
            if (i_tym>1000){
            i_tym=1000;
            }
            if (i_tym>-1000){
            i_tym=-1000;
            }
            D_term = Kd*(d_tym-Uchyb);
            d_tym = Uchyb;*/




#ifdef TMSLAB_WIN
            if(PartialRefresh()) return 0;
#ifdef WIN_PLOT
// Zapis danych do pliku
// fprintf(outputCSV,CSV_DANE);
printf("time %i \n",Tim);
fflush(outputCSV);
fflush(stdout);
#endif
#endif

        }
    }

#ifdef TMSLAB_C2000

    interrupt
    void Timer2Isr()
    {



#ifdef BUFFERSYNC
        if (EnableRefresh)
        LCD.PartialRefresh();
#else
        LCD.PartialRefresh();
#endif

        KEYBOARD.PartialRefresh();

    if (++preScale == 30000)
    {
        if (Tim > 100)
        {
            p++;
        }
        preScale = 0;
        Tim++;
    }
}

    unsigned long ADRFTECHED = 0;
    interrupt
    void NoIsr()
    {
        ADRFTECHED = PieCtrlRegs.PIECTRL.bit.PIEVECT;
        asm(" ESTOP0");
    }

    void EnableInterrupts()
    {

        EALLOW;
        //Ustawienie wektorow przerwan
        unsigned long VECTBEG = (unsigned long) &PieVectTable;
        unsigned long VECTLAST = (unsigned long) &PieVectTable
        + sizeof(PieVectTable);
        while (VECTBEG >= VECTLAST)
        *(unsigned long*) VECTBEG++ = (unsigned long) NoIsr;
        PieVectTable.TIMER2_INT = Timer2Isr;

        CpuTimer2Regs.TCR.bit.TIE = 1;
        CpuTimer2Regs.TCR.bit.TRB = 1;

        IER = IER_MASK;//Odblokuj przerwania
        asm(" push ier");
        asm(" pop dbgier");

        PieCtrlRegs.PIECTRL.bit.ENPIE = 1;
        PieCtrlRegs.PIEACK.all = 0xffff;
        EDIS;
        EINT;
    }

    void SetUpPeripherials()
    {
        SetupCoreSystem();
        ekran = (unsigned long *) 0x8000;              //[8*128*2]
        textEkran = (unsigned char*) 0x8a00;//[40*16/2]
        EALLOW;
        //Okres licznika T2
        CpuTimer2Regs.PRD.all = System_Clk * Timer2ISR_Period;
        EDIS;
    }
    extern "C"
    {
    int _system_pre_init()
    {
        EALLOW;
        WdRegs.WDWCR.all = 0x68;
        EDIS;
        return (1);
    }
    }
#endif

#ifdef TMSLAB_WIN
    void EnableInterrupts()

    {}
    void SetUpPeripherials()
    {}
    void Timer2Isr()
    {
if (++preScale == 50) {
preScale = 0;
Tim++;
}
}
#endif

    void InitData()
    {
        for (int a = 0; a < (128 * 8); a++)
            ekran[a] = 0;
        for (int a = 0; a < (40 * 16); a++)
            textEkran[a] = ' ';
    #ifndef CPP_EXAMPLE
        for (int a = 0; a < MaxObj; a++)
        {
            s[a] = (rand() & 0x1f) + 1;
            x[a] = rand() & 0x03ff;
            if (x[a] > 239 * 4 - s[a])
                x[a] -= 239 * 4 - s[a];
            y[a] = rand() & 0x1ff;
            if (y[a] > 127 * 4 - s[a])
                y[a] -= 127 * 4 - s[a];
            dx[a] = ((rand() & 0x1) ? 1 : -1) * (((rand() & 0x7) + 2) >> 1);
            dy[a] = ((rand() & 0x1) ? 1 : -1) * (((rand() & 0x7) + 2) >> 1);
        }
    #endif
    }
    void ClearScreen()
    {

        for (int a = 0; a < (128 * 8); a++)
        ekran[a] = 0;
    }
    void DrawPixels(int Key)
    {
    #ifdef CPP_EXAMPLE
        for (int c=0;c<MaxObj;c++)
        {
            objects[c].move(Key,Key);
            objects[c].draw();
        }
    #else
        for (int c = 0; c < MaxObj; c++)
        {
            y[c] += dy[c] + 6 - Key;
            x[c] += dx[c] + 6 - Key;
            if (x[c] < 0)
                x[c] += 239 * 4 - s[c];
            if (y[c] < 0)
                y[c] += 127 * 4 - s[c];
            if (x[c] > 239 * 4 - s[c])
                x[c] -= 239 * 4 - s[c];
            if (y[c] > 127 * 4 - s[c])
                y[c] -= 127 * 4 - s[c];
            long sdec = (((x[c] - 120 * 4L) * (x[c] - 120 * 4L)) >> 13)
                    + (((y[c] - 58 * 4L) * (y[c] - 58 * 4L)) >> 9);
            long size = s[c] - sdec;
            if (size < 0)
                size = 0;
            size = s[c] - size;

            for (int b = y[c] >> 2; b < (y[c] + size) >> 2; b++)
                for (int a = x[c] >> 2; a < (x[c] + size) >> 2; a++)
                    SetPixel(ekran, a, b);

        }
    #endif
    }
